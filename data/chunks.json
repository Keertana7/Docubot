[
  "===============\n Ceph Glossary\n===============\n\n.. glossary::\n\n        Application\n                More properly called a :term:`client`, an application is any program\n                external to Ceph that uses a Ceph Cluster to store and\n                replicate data.",
  ":ref:`BlueStore<rados_config_storage_devices_bluestore>`\n                OSD BlueStore is a storage back end used by OSD daemons, and\n                was designed specifically for use with Ceph. BlueStore was\n                introduced in the Ceph Kraken release. The Luminous release of\n                Ceph promoted BlueStore to the default OSD back end,\n                supplanting FileStore. As of the Reef release, FileStore is no\n                longer available as a storage back end.",
  "BlueStore stores objects directly on raw block devices or\n                partitions, and does not interact with mounted file systems.\n                BlueStore uses RocksDB's key/value database to map object names\n                to block locations on disk.",
  "Bucket\n                In the context of :term:`RGW`, a bucket is a group of objects.\n                In a filesystem-based analogy in which objects are the\n                counterpart of files, buckets are the counterpart of\n                directories. :ref:`Multisite sync\n                policies<radosgw-multisite-sync-policy>` can be set on buckets,\n                to provide fine-grained control of data movement from one zone\n                to another zone.",
  "The concept of the bucket has been taken from AWS S3. See also\n                `the AWS S3 page on creating buckets <https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html>`_\n                and `the AWS S3 'Buckets Overview' page <https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingBucket.html>`_.",
  "OpenStack Swift uses the term \"containers\" for what RGW and AWS call \"buckets\". \n                See `the OpenStack Storage API overview page <https://docs.openstack.org/swift/latest/api/object_api_v1_overview.html>`_.\n                \n\tCeph\n                Ceph is a distributed network storage and file system with\n                distributed metadata management and POSIX semantics.",
  "`ceph-ansible <https://docs.ceph.com/projects/ceph-ansible/en/latest/index.html>`_\n                A GitHub repository, supported from the Jewel release to the\n                Quincy release, that facilitates the installation of a Ceph\n                cluster.\n                \n\tCeph Block Device\n                Also called \"RADOS Block Device\" and :term:`RBD`. A software\n                instrument that orchestrates the storage of block-based data in",
  "Ceph. Ceph Block Device splits block-based application data\n                into \"chunks\". RADOS stores these chunks as objects. Ceph Block\n                Device orchestrates the storage of those objects across the\n                storage cluster.",
  "Ceph Block Storage\n                One of the three kinds of storage supported by Ceph (the other\n                two are object storage and file storage). Ceph Block Storage is\n                the block storage \"product\", which refers to block-storage\n                related services and capabilities when used in conjunction with\n                the collection of (1) ``librbd`` (a python module that provides\n                file-like access to :term:`RBD` images), (2) a hypervisor such",
  "as QEMU or Xen, and (3) a hypervisor abstraction layer such as\n                ``libvirt``.",
  ":ref:`Ceph Client <architecture_ceph_clients>`\n                Any of the Ceph components that can access a Ceph Storage\n                Cluster. This includes the Ceph Object Gateway, the Ceph Block\n                Device, the Ceph File System, and their corresponding\n                libraries. It also includes kernel modules, and FUSEs\n                (Filesystems in USERspace).",
  "Ceph Client Libraries\n                The collection of libraries that can be used to interact with\n                components of the Ceph Cluster.\n\n\tCeph Cluster Map\n                See :term:`Cluster Map`",
  "Ceph Dashboard\n                :ref:`The Ceph Dashboard<mgr-dashboard>` is a built-in\n                web-based Ceph management and monitoring application through\n                which you can inspect and administer various resources within\n                the cluster. It is implemented as a :ref:`ceph-manager-daemon`\n                module.\n\n\tCeph File System\n                See :term:`CephFS`",
  ":ref:`CephFS<ceph-file-system>`\n                The **Ceph F**\\ile **S**\\ystem, or CephFS, is a\n                POSIX-compliant file system built on top of Cephâ€™s distributed\n                object store, RADOS.  See :ref:`CephFS Architecture\n                <arch-cephfs>` for more details.",
  ":ref:`ceph-fuse <man-ceph-fuse>`\n                :ref:`ceph-fuse <man-ceph-fuse>` is a FUSE (\"**F**\\ilesystem in\n                **USE**\\rspace\") client for CephFS. ceph-fuse mounts a Ceph FS\n                ata  specified mount point. \n\n\tCeph Interim Release\n                See :term:`Releases`.\n\n\tCeph Kernel Modules\n                The collection of kernel modules that can be used to interact\n                with the Ceph Cluster (for example: ``ceph.ko``, ``rbd.ko``).",
  ":ref:`Ceph Manager<ceph-manager-daemon>`\n                The Ceph manager daemon (ceph-mgr) is a daemon that runs\n                alongside monitor daemons to provide monitoring and interfacing\n                to external monitoring and management systems. Since the\n                Luminous release (12.x), no Ceph cluster functions properly\n                unless it contains a running ceph-mgr daemon. \n\n\tCeph Manager Dashboard\n                See :term:`Ceph Dashboard`.",
  "Ceph Metadata Server\n                See :term:`MDS`.",
  "Ceph Monitor\n                A daemon that maintains a map of the state of the cluster. This\n                \"cluster state\" includes the monitor map, the manager map, the\n                OSD map, and the CRUSH map. A Ceph cluster must contain a\n                minimum of three running monitors in order to be both redundant\n                and highly-available. Ceph monitors and the nodes on which they\n                run are often referred to as \"mon\"s. See :ref:`Monitor Config",
  "Reference <monitor-config-reference>`.",
  "Ceph Node\n               A Ceph node is a unit of the Ceph Cluster that communicates with\n               other nodes in the Ceph Cluster in order to replicate and\n               redistribute data. All of the nodes together are called the\n               :term:`Ceph Storage Cluster`. Ceph nodes include :term:`OSD`\\s,\n               :term:`Ceph Monitor`\\s, :term:`Ceph Manager`\\s, and\n               :term:`MDS`\\es. The term \"node\" is usually equivalent to \"host\"",
  "in the Ceph documentation. If you have a running Ceph Cluster,\n               you can list all of the nodes in it by running the command\n               ``ceph node ls all``.\n                \n\t:ref:`Ceph Object Gateway<object-gateway>`\n                An object storage interface built on top of librados. Ceph\n                Object Gateway provides a RESTful gateway between applications\n                and Ceph storage clusters.",
  "Ceph Object Storage\n                See :term:`Ceph Object Store`.\n\n\tCeph Object Store\n                A Ceph Object Store consists of a :term:`Ceph Storage Cluster`\n                and a :term:`Ceph Object Gateway` (RGW).",
  ":ref:`Ceph OSD<rados_configuration_storage-devices_ceph_osd>`\n                Ceph **O**\\bject **S**\\torage **D**\\aemon. The Ceph OSD\n                software, which interacts with logical disks (:term:`OSD`).\n                Around 2013, there was an attempt by \"research and industry\"\n                (Sage's own words) to insist on using the term \"OSD\" to mean\n                only \"Object Storage Device\", but the Ceph community has always",
  "persisted in using the term to mean \"Object Storage Daemon\" and\n                no less an authority than Sage Weil himself confirms in\n                November of 2022 that \"Daemon is more accurate for how Ceph is\n                built\" (private correspondence between Zac Dover and Sage Weil,\n                07 Nov 2022).",
  "Ceph OSD Daemon\n                See :term:`Ceph OSD`.\n\n\tCeph OSD Daemons\n                See :term:`Ceph OSD`.\n\n\tCeph Platform\n                All Ceph software, which includes any piece of code hosted at\n                `https://github.com/ceph`_.\n\n\tCeph Point Release\n                See :term:`Releases`.\n\n\tCeph Project\n                The aggregate term for the people, software, mission and\n                infrastructure of Ceph.\n\n\tCeph Release\n                See :term:`Releases`.",
  "Ceph Release Candidate\n                See :term:`Releases`.\n\n\tCeph Stable Release\n                See :term:`Releases`.\n\n\tCeph Stack\n\t\tA collection of two or more components of Ceph.",
  ":ref:`Ceph Storage Cluster<arch-ceph-storage-cluster>`\n                The collection of :term:`Ceph Monitor`\\s, :term:`Ceph\n                Manager`\\s, :term:`Ceph Metadata Server`\\s, and :term:`OSD`\\s\n                that work together to store and replicate data for use by\n                applications, Ceph Users, and :term:`Ceph Client`\\s. Ceph\n                Storage Clusters receive data from :term:`Ceph Client`\\s.",
  "CephX\n                The Ceph authentication protocol. CephX authenticates users and\n                daemons. CephX operates like Kerberos, but it has no single\n                point of failure. See the :ref:`High-availability\n                Authentication section<arch_high_availability_authentication>`\n                of the Architecture document and the :ref:`CephX Configuration\n                Reference<rados-cephx-config-ref>`.",
  "Client\n                A client is any program external to Ceph that uses a Ceph\n                Cluster to store and replicate data. \n\n\tCloud Platforms\n\tCloud Stacks\n                Third party cloud provisioning platforms such as OpenStack,\n                CloudStack, OpenNebula, and Proxmox VE.",
  "Cluster Map\n                The set of maps consisting of the monitor map, OSD map, PG map,\n                MDS map, and CRUSH map, which together report the state of the\n                Ceph cluster. See :ref:`the \"Cluster Map\" section of the\n                Architecture document<architecture_cluster_map>` for details.",
  "Crimson\n                A next-generation OSD architecture whose aim is the\n                reduction of latency costs incurred due to cross-core\n                communications. A re-design of the OSD reduces lock\n                contention by reducing communication between shards in the data\n                path. Crimson improves upon the performance of classic Ceph\n                OSDs by eliminating reliance on thread pools. See `Crimson:",
  "Next-generation Ceph OSD for Multi-core Scalability\n                <https://ceph.io/en/news/blog/2023/crimson-multi-core-scalability/>`_.\n                See the :ref:`Crimson developer\n                documentation<crimson_dev_doc>`.",
  "CRUSH\n                **C**\\ontrolled **R**\\eplication **U**\\nder **S**\\calable\n                **H**\\ashing. The algorithm that Ceph uses to compute object\n                storage locations. See `CRUSH: Controlled, Scalable,\n                Decentralized Placement of Replicated Data\n                <https://ceph.com/assets/pdfs/weil-crush-sc06.pdf>`_.\n\n\tCRUSH rule\n                The CRUSH data placement rule that applies to a particular\n                pool or pools.",
  "DAS\n                **D**\\irect-\\ **A**\\ttached **S**\\torage. Storage that is\n                attached directly to the computer accessing it, without passing\n                through a network.  Contrast with NAS and SAN.",
  ":ref:`Dashboard<mgr-dashboard>`\n                A built-in web-based Ceph management and monitoring application\n                to administer various aspects and objects of the cluster. The\n                dashboard is implemented as a Ceph Manager module. See\n                :ref:`mgr-dashboard` for more details.\n\n\tDashboard Module\n                Another name for :term:`Dashboard`.",
  "Dashboard Plugin\n                The dashboard plugin was a Mimic-era web application that\n                visualized information and statistics about the Ceph cluster\n                using a web server hosted by the :ref:`Ceph\n                Manager<ceph-manager-daemon>`.\n\n                See `the Mimic-era Dashboard Plugin documentation\n                <https://docs.ceph.com/en/mimic/mgr/dashboard/>`_.\n\n        DC\n                **D**\\ata **C**\\enter.",
  "Flapping OSD\n                An OSD that is repeatedly marked ``up`` and then ``down`` in\n                rapid succession. See :ref:`rados_tshooting_flapping_osd`.\n\n        FQDN\n                **F**\\ully **Q**\\ualified **D**\\omain **N**\\ame. A domain name\n                that is applied to a node in a network and that specifies the\n                node's exact location in the tree hierarchy of the DNS.",
  "In the context of Ceph cluster administration, FQDNs are often\n                applied to hosts. In this documentation, the term \"FQDN\" is\n                used mostly to distinguish between FQDNs and relatively simpler\n                hostnames, which do not specify the exact location of the host\n                in the tree hierarchy of the DNS but merely name the host.\n\n\tHost\n                Any single machine or server in a Ceph Cluster. See :term:`Ceph\n                Node`.",
  "Hybrid OSD  \n                Refers to an OSD that has both HDD and SSD drives.\n\n        librados\n                An API that can be used to create a custom interface to a Ceph\n                storage cluster. ``librados`` makes it possible to interact\n                with Ceph Monitors and with OSDs. See :ref:`Introduction to\n                librados <librados-intro>`. See :ref:`librados (Python)\n                <librados-python>`.",
  "LVM tags\n                **L**\\ogical **V**\\olume **M**\\anager tags. Extensible metadata\n                for LVM volumes and groups. They are used to store\n                Ceph-specific information about devices and its relationship\n                with OSDs.",
  "MDS\n                The Ceph **M**\\eta\\ **D**\\ata **S**\\erver daemon. Also referred\n                to as \"ceph-mds\". The Ceph metadata server daemon must be\n                running in any Ceph cluster that runs the CephFS file system.\n                The MDS stores all filesystem metadata. :term:`Client`\\s work\n                together with either a single MDS or a group of MDSes to\n                maintain a distributed metadata cache that is required by\n                CephFS.",
  "See :ref:`Deploying Metadata Servers<cephfs_add_remote_mds>`.\n\n                See the :ref:`ceph-mds man page<ceph_mds_man>`.\n\n\tMGR\n                The Ceph manager software, which collects all the state from\n                the whole cluster in one place.\n\n\t:ref:`MON<arch_monitor>`\n\t\tThe Ceph monitor software.",
  "Monitor Store\n                The persistent storage that is used by the Monitor. This\n                includes the Monitor's RocksDB and all related files in\n                ``/var/lib/ceph``.\n\n\tNode\n                See :term:`Ceph Node`.",
  "Node\n                See :term:`Ceph Node`.\n\n\tObject Storage\n                Object storage is one of three kinds of storage relevant to\n                Ceph. The other two kinds of storage relevant to Ceph are file\n                storage and block storage. Object storage is the category of\n                storage most fundamental to Ceph.\n\n\tObject Storage Device\n                See :term:`OSD`.",
  "omap \n                \"object map\". A key-value store (a database) that is used to\n                reduce the time it takes to read data from and to write to the\n                Ceph cluster. RGW bucket indexes are stored as omaps.\n                Erasure-coded pools cannot store RADOS omap data structures.\n               \n                Run the command ``ceph osd df`` to see your omap.",
  "See Eleanor Cawthon's 2012 paper `A Distributed Key-Value Store\n                using Ceph\n                <https://ceph.io/assets/pdfs/CawthonKeyValueStore.pdf>`_ (17\n                pages).\n\n        OpenStack Swift\n                In the context of Ceph, OpenStack Swift is one of the two APIs\n                supported by the Ceph Object Store. The other API supported by\n                the Ceph Object Store is S3.",
  "See `the OpenStack Storage API overview page\n                <https://docs.openstack.org/swift/latest/api/object_api_v1_overview.html>`_.",
  "OSD\n                Probably :term:`Ceph OSD`, but not necessarily. Sometimes\n                (especially in older correspondence, and especially in\n                documentation that is not written specifically for Ceph), \"OSD\"\n                means \"**O**\\bject **S**\\torage **D**\\evice\", which refers to a\n                physical or logical storage unit (for example: LUN). The Ceph\n                community has always used the term \"OSD\" to refer to",
  ":term:`Ceph OSD Daemon` despite an industry push in the\n                mid-2010s to insist that \"OSD\" should refer to \"Object Storage\n                Device\", so it is important to know which meaning is intended.",
  "OSD, flapping\n                See :term:`Flapping OSD`.\n\n\tOSD FSID \n                The OSD fsid is a unique identifier that is used to identify an\n                OSD. It is found in the OSD path in a file called ``osd_fsid``.\n                The term ``FSID`` is used interchangeably with ``UUID``.",
  "OSD ID \n                The OSD id an integer unique to each OSD (each OSD has a unique\n                OSD ID). Each OSD id is generated by the monitors during the\n                creation of its associated OSD.\n\n\tOSD UUID \n                The OSD UUID is the unique identifier of an OSD. This term is\n                used interchangeably with ``FSID``.",
  "Period\n                In the context of :term:`RGW`, a period is the configuration\n                state of the :term:`Realm`. The period stores the configuration\n                state of a multi-site configuration. When the period is updated,\n                the \"epoch\" is said thereby to have been changed.",
  "Placement Groups (PGs)\n                Placement groups (PGs) are subsets of each logical Ceph pool.\n                Placement groups perform the function of placing objects (as a\n                group) into OSDs. Ceph manages data internally at\n                placement-group granularity: this scales better than would\n                managing individual (and therefore more numerous) RADOS\n                objects. A cluster that has a larger number of placement groups",
  "(for example, 100 per OSD) is better balanced than an otherwise\n                identical cluster with a smaller number of placement groups. \n                \n                Ceph's internal RADOS objects are each mapped to a specific\n                placement group, and each placement group belongs to exactly\n                one Ceph pool.",
  "PLP \n                **P**\\ower **L**\\oss **P**\\rotection. A technology that\n                protects the data of solid-state drives by using capacitors to\n                extend the amount of time available for transferring data from\n                the DRAM cache to the SSD's permanent memory. Consumer-grade\n                SSDs are rarely equipped with PLP.\n\n\t:ref:`Pool<rados_pools>`\n\n\t\tA pool is a logical partition used to store objects.\n\n\tPools\n                See :term:`pool`.",
  "Pools\n                See :term:`pool`.\n\n\t:ref:`Primary Affinity <rados_ops_primary_affinity>`\n                The characteristic of an OSD that governs the likelihood that\n                a given OSD will be selected as the primary OSD (or \"lead\n                OSD\") in an acting set. Primary affinity was introduced in\n                Firefly (v. 0.80). See :ref:`Primary Affinity\n                <rados_ops_primary_affinity>`.",
  ":ref:`Prometheus <mgr-prometheus>`\n                An open-source monitoring and alerting toolkit. Ceph offers a\n                :ref:`\"Prometheus module\" <mgr-prometheus>`, which provides a\n                Prometheus exporter that passes performance counters from a\n                collection point in ``ceph-mgr`` to Prometheus.",
  "Quorum\t\n                Quorum is the state that exists when a majority of the\n                :ref:`Monitors<arch_monitor>` in the cluster are ``up``. A\n                minimum of three :ref:`Monitors<arch_monitor>` must exist in\n                the cluster in order for Quorum to be possible.",
  "RADOS\n                **R**\\eliable **A**\\utonomic **D**\\istributed **O**\\bject\n                **S**\\tore. RADOS is the object store that provides a scalable\n                service for variably-sized objects. The RADOS object store is\n                the core component of a Ceph cluster.  `This blog post from\n                2009\n                <https://ceph.io/en/news/blog/2009/the-rados-distributed-object-store/>`_",
  "provides a beginner's introduction to RADOS. Readers interested\n                in a deeper understanding of RADOS are directed to `RADOS: A\n                Scalable, Reliable Storage Service for Petabyte-scale Storage\n                Clusters <https://ceph.io/assets/pdfs/weil-rados-pdsw07.pdf>`_.",
  "RADOS Cluster\n                A proper subset of the Ceph Cluster consisting of\n                :term:`OSD`\\s, :term:`Ceph Monitor`\\s, and :term:`Ceph\n                Manager`\\s.\n                \n\tRADOS Gateway\n                See :term:`RGW`.\n\n\tRBD\n                **R**\\ADOS **B**\\lock **D**\\evice. See :term:`Ceph Block\n                Device`.",
  ":ref:`Realm<rgw-realms>`\n                In the context of RADOS Gateway (RGW), a realm is a globally\n                unique namespace that consists of one or more zonegroups.\n\n        Releases\n\n\t        Ceph Interim Release\n                        A version of Ceph that has not yet been put through\n                        quality assurance testing. May contain new features.",
  "Ceph Point Release\n                        Any ad hoc release that includes only bug fixes and\n                        security fixes.\n\n                Ceph Release\n                        Any distinct numbered version of Ceph.\n\n                Ceph Release Candidate\n                        A major version of Ceph that has undergone initial\n                        quality assurance testing and is ready for beta\n                        testers.",
  "Ceph Stable Release\n                        A major version of Ceph where all features from the\n                        preceding interim releases have been put through\n                        quality assurance testing successfully.\n\n\tReliable Autonomic Distributed Object Store\n                The core set of storage software which stores the user's data\n                (MON+OSD). See also :term:`RADOS`.",
  ":ref:`RGW<object-gateway>`\n                **R**\\ADOS **G**\\ate\\ **w**\\ay.\n\n                Also called \"Ceph Object Gateway\". The component of Ceph that\n                provides a gateway to both the Amazon S3 RESTful API and the\n                OpenStack Swift API. \n\n        S3\n                In the context of Ceph, S3 is one of the two APIs supported by\n                the Ceph Object Store. The other API supported by the Ceph\n                Object Store is OpenStack Swift.",
  "See `the Amazon S3 overview page\n                <https://aws.amazon.com/s3/>`_.\n\n        scrubs",
  "The processes by which Ceph ensures data integrity. During the\n                process of scrubbing, Ceph generates a catalog of all objects\n                in a placement group, then ensures that none of the objects are\n                missing or mismatched by comparing each primary object against\n                its replicas, which are stored across other OSDs. Any PG\n                is determined to have a copy of an object that is different",
  "than the other copies or is missing entirely is marked\n                \"inconsistent\" (that is, the PG is marked \"inconsistent\").",
  "There are two kinds of scrubbing: light scrubbing and deep\n                scrubbing (also called \"shallow scrubbing\" and \"deep scrubbing\",\n                respectively). Light scrubbing is performed daily and does\n                nothing more than confirm that a given object exists and that\n                its metadata is correct. Deep scrubbing is performed weekly and\n                reads the data and uses checksums to ensure data integrity.",
  "See :ref:`Scrubbing <rados_config_scrubbing>` in the RADOS OSD\n                Configuration Reference Guide and page 141 of *Mastering Ceph,\n                second edition* (Fisk, Nick. 2019).",
  "secrets\n                Secrets are credentials used to perform digital authentication\n                whenever privileged users must access systems that require\n                authentication. Secrets can be passwords, API keys, tokens, SSH\n                keys, private certificates, or encryption keys.\n\n        SDS\n                **S**\\oftware-**d**\\efined **S**\\torage.",
  "systemd oneshot\n                A systemd ``type`` where a command is defined in ``ExecStart``\n                which will exit upon completion (it is not intended to\n                daemonize)\n\n        Swift\n                See :term:`OpenStack Swift`.\n\n\tTeuthology\n\t\tThe collection of software that performs scripted tests on Ceph.",
  "User\n                An individual or a system actor (for example, an application)\n                that uses Ceph clients to interact with the :term:`Ceph Storage\n                Cluster`. See :ref:`User<rados-ops-user>` and :ref:`User\n                Management<user-management>`.",
  "Zone\n                In the context of :term:`RGW`, a zone is a logical group that\n                consists of one or more :term:`RGW` instances.  A zone's\n                configuration state is stored in the :term:`period`. See\n                :ref:`Zones<radosgw-zones>`.\n\n.. _https://github.com/ceph: https://github.com/ceph\n.. _Cluster Map: ../architecture#cluster-map"
]